# coding: utf-8

"""
    The Enrichment List

    The THS enrichment list  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contactme@markwilkins.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from walklist_api_service.api_client import ApiClient


class MetricApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enrichments_by_colour_code(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns a breakdown of enrichment sessions by colour code for a given date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrichments_by_colour_code(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrichments_by_colour_code_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.enrichments_by_colour_code_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def enrichments_by_colour_code_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns a breakdown of enrichment sessions by colour code for a given date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrichments_by_colour_code_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrichments_by_colour_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `enrichments_by_colour_code`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `enrichments_by_colour_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/enrichments-by-colour-code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_animal_count(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_animal_count(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_animal_count_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_animal_count_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_animal_count_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_animal_count_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_animal_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_animal_count`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_animal_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/animal-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_animal_count_by_colour_code(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type, broken down by colour code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_animal_count_by_colour_code(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_animal_count_by_colour_code_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_animal_count_by_colour_code_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_animal_count_by_colour_code_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type, broken down by colour code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_animal_count_by_colour_code_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_animal_count_by_colour_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_animal_count_by_colour_code`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_animal_count_by_colour_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/animal-count-by-colour-code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_average_enrichment_session_length(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the contribution for each \"human tyoe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_average_enrichment_session_length(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_average_enrichment_session_length_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_average_enrichment_session_length_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_average_enrichment_session_length_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the contribution for each \"human tyoe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_average_enrichment_session_length_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_average_enrichment_session_length" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_average_enrichment_session_length`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_average_enrichment_session_length`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/average-enrichment-session-length', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_enrichments_by_type(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns a breakdown of enrichment sessions by type for a given date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_enrichments_by_type(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_enrichments_by_type_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_enrichments_by_type_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_enrichments_by_type_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns a breakdown of enrichment sessions by type for a given date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_enrichments_by_type_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_enrichments_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_enrichments_by_type`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_enrichments_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/enrichments-by-type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_human_type_breakdown(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the average enrichment session length for each day, as well as overall, for the given date range. Optionally filtered by animal type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_human_type_breakdown(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_human_type_breakdown_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_human_type_breakdown_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_human_type_breakdown_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the average enrichment session length for each day, as well as overall, for the given date range. Optionally filtered by animal type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_human_type_breakdown_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_human_type_breakdown" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_human_type_breakdown`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_human_type_breakdown`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/human-type-breakdown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_total_enrichment_times(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the contribution for each \"human tyoe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_total_enrichment_times(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_total_enrichment_times_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_total_enrichment_times_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_total_enrichment_times_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns the contribution for each \"human tyoe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_total_enrichment_times_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_total_enrichment_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_total_enrichment_times`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_total_enrichment_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/total-enrichment-times', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_total_time(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_total_time(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metrics_total_time_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_total_time_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_metrics_total_time_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Your GET endpoint  # noqa: E501

        Returns information on animal count for a given date range optionally filtered by animal type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metrics_total_time_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: (required)
        :param date end_date: (required)
        :param str animal_type_name:
        :param int animal_type_id:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'animal_type_name', 'animal_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_total_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_metrics_total_time`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_metrics_total_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'animal_type_name' in params:
            query_params.append(('animal_type_name', params['animal_type_name']))  # noqa: E501
        if 'animal_type_id' in params:
            query_params.append(('animal_type_id', params['animal_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['userToken']  # noqa: E501

        return self.api_client.call_api(
            '/metrics/total-time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
