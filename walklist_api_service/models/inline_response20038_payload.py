# coding: utf-8

"""
    The Enrichment List

    The THS enrichment list  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contactme@markwilkins.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

def getResponse():
    from walklist_api_service.models.response import Response
    return Response

class InlineResponse20038Payload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'human_type': 'HumanType',
        'contribution_mins': 'float',
        'contribution_percent': 'float'
    }

    attribute_map = {
        'human_type': 'humanType',
        'contribution_mins': 'contribution_mins',
        'contribution_percent': 'contribution_percent'
    }

    def __init__(self, human_type=None, contribution_mins=None, contribution_percent=None):  # noqa: E501
        """InlineResponse20038Payload - a model defined in Swagger"""  # noqa: E501
        self._human_type = None
        self._contribution_mins = None
        self._contribution_percent = None
        self.discriminator = None
        if human_type is not None:
            self.human_type = human_type
        if contribution_mins is not None:
            self.contribution_mins = contribution_mins
        if contribution_percent is not None:
            self.contribution_percent = contribution_percent

    @property
    def human_type(self):
        """Gets the human_type of this InlineResponse20038Payload.  # noqa: E501


        :return: The human_type of this InlineResponse20038Payload.  # noqa: E501
        :rtype: HumanType
        """
        return self._human_type

    @human_type.setter
    def human_type(self, human_type):
        """Sets the human_type of this InlineResponse20038Payload.


        :param human_type: The human_type of this InlineResponse20038Payload.  # noqa: E501
        :type: HumanType
        """

        self._human_type = human_type

    @property
    def contribution_mins(self):
        """Gets the contribution_mins of this InlineResponse20038Payload.  # noqa: E501


        :return: The contribution_mins of this InlineResponse20038Payload.  # noqa: E501
        :rtype: float
        """
        return self._contribution_mins

    @contribution_mins.setter
    def contribution_mins(self, contribution_mins):
        """Sets the contribution_mins of this InlineResponse20038Payload.


        :param contribution_mins: The contribution_mins of this InlineResponse20038Payload.  # noqa: E501
        :type: float
        """

        self._contribution_mins = contribution_mins

    @property
    def contribution_percent(self):
        """Gets the contribution_percent of this InlineResponse20038Payload.  # noqa: E501


        :return: The contribution_percent of this InlineResponse20038Payload.  # noqa: E501
        :rtype: float
        """
        return self._contribution_percent

    @contribution_percent.setter
    def contribution_percent(self, contribution_percent):
        """Sets the contribution_percent of this InlineResponse20038Payload.


        :param contribution_percent: The contribution_percent of this InlineResponse20038Payload.  # noqa: E501
        :type: float
        """

        self._contribution_percent = contribution_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20038Payload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20038Payload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
