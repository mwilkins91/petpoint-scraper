# coding: utf-8

"""
    The Enrichment List

    The THS enrichment list  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contactme@markwilkins.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ResponseMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_type': 'str',
        'current_page': 'int',
        'total_pages': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'response_type': 'responseType',
        'current_page': 'currentPage',
        'total_pages': 'totalPages',
        'limit': 'limit'
    }

    def __init__(self, response_type=None, current_page=None, total_pages=None, limit=None):  # noqa: E501
        """ResponseMeta - a model defined in Swagger"""  # noqa: E501
        self._response_type = None
        self._current_page = None
        self._total_pages = None
        self._limit = None
        self.discriminator = None
        if response_type is not None:
            self.response_type = response_type
        if current_page is not None:
            self.current_page = current_page
        if total_pages is not None:
            self.total_pages = total_pages
        if limit is not None:
            self.limit = limit

    @property
    def response_type(self):
        """Gets the response_type of this ResponseMeta.  # noqa: E501


        :return: The response_type of this ResponseMeta.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this ResponseMeta.


        :param response_type: The response_type of this ResponseMeta.  # noqa: E501
        :type: str
        """

        self._response_type = response_type

    @property
    def current_page(self):
        """Gets the current_page of this ResponseMeta.  # noqa: E501


        :return: The current_page of this ResponseMeta.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this ResponseMeta.


        :param current_page: The current_page of this ResponseMeta.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def total_pages(self):
        """Gets the total_pages of this ResponseMeta.  # noqa: E501


        :return: The total_pages of this ResponseMeta.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this ResponseMeta.


        :param total_pages: The total_pages of this ResponseMeta.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def limit(self):
        """Gets the limit of this ResponseMeta.  # noqa: E501


        :return: The limit of this ResponseMeta.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ResponseMeta.


        :param limit: The limit of this ResponseMeta.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
