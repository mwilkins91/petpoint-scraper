# coding: utf-8

"""
    The Enrichment List

    The THS enrichment list  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contactme@markwilkins.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

def getResponse():
    from walklist_api_service.models.response import Response
    return Response

class InlineResponse20037(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payload': 'Object',
        'meta': 'ResponseMeta',
        'overall_total': 'float',
        'max_daily_total': 'float',
        'min_daily_total': 'float',
        'dates': 'InlineResponse20037Dates',
        'overal_average': 'float'
    }
    if hasattr(getResponse(), "swagger_types"):
        swagger_types.update(getResponse().swagger_types)

    attribute_map = {
        'payload': 'payload',
        'meta': 'meta',
        'overall_total': 'overall_total',
        'max_daily_total': 'max_daily_total',
        'min_daily_total': 'min_daily_total',
        'dates': 'dates',
        'overal_average': 'overal_average'
    }
    if hasattr(getResponse(), "attribute_map"):
        attribute_map.update(getResponse().attribute_map)

    def __init__(self, payload=None, meta=None, overall_total=None, max_daily_total=None, min_daily_total=None, dates=None, overal_average=None, *args, **kwargs):  # noqa: E501
        """InlineResponse20037 - a model defined in Swagger"""  # noqa: E501
        self._payload = None
        self._meta = None
        self._overall_total = None
        self._max_daily_total = None
        self._min_daily_total = None
        self._dates = None
        self._overal_average = None
        self.discriminator = None
        if payload is not None:
            self.payload = payload
        if meta is not None:
            self.meta = meta
        if overall_total is not None:
            self.overall_total = overall_total
        if max_daily_total is not None:
            self.max_daily_total = max_daily_total
        if min_daily_total is not None:
            self.min_daily_total = min_daily_total
        if dates is not None:
            self.dates = dates
        if overal_average is not None:
            self.overal_average = overal_average
        Response.__init__(self, *args, **kwargs)

    @property
    def payload(self):
        """Gets the payload of this InlineResponse20037.  # noqa: E501


        :return: The payload of this InlineResponse20037.  # noqa: E501
        :rtype: Object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this InlineResponse20037.


        :param payload: The payload of this InlineResponse20037.  # noqa: E501
        :type: Object
        """

        self._payload = payload

    @property
    def meta(self):
        """Gets the meta of this InlineResponse20037.  # noqa: E501


        :return: The meta of this InlineResponse20037.  # noqa: E501
        :rtype: ResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InlineResponse20037.


        :param meta: The meta of this InlineResponse20037.  # noqa: E501
        :type: ResponseMeta
        """

        self._meta = meta

    @property
    def overall_total(self):
        """Gets the overall_total of this InlineResponse20037.  # noqa: E501


        :return: The overall_total of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._overall_total

    @overall_total.setter
    def overall_total(self, overall_total):
        """Sets the overall_total of this InlineResponse20037.


        :param overall_total: The overall_total of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._overall_total = overall_total

    @property
    def max_daily_total(self):
        """Gets the max_daily_total of this InlineResponse20037.  # noqa: E501


        :return: The max_daily_total of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._max_daily_total

    @max_daily_total.setter
    def max_daily_total(self, max_daily_total):
        """Sets the max_daily_total of this InlineResponse20037.


        :param max_daily_total: The max_daily_total of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._max_daily_total = max_daily_total

    @property
    def min_daily_total(self):
        """Gets the min_daily_total of this InlineResponse20037.  # noqa: E501


        :return: The min_daily_total of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._min_daily_total

    @min_daily_total.setter
    def min_daily_total(self, min_daily_total):
        """Sets the min_daily_total of this InlineResponse20037.


        :param min_daily_total: The min_daily_total of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._min_daily_total = min_daily_total

    @property
    def dates(self):
        """Gets the dates of this InlineResponse20037.  # noqa: E501


        :return: The dates of this InlineResponse20037.  # noqa: E501
        :rtype: InlineResponse20037Dates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this InlineResponse20037.


        :param dates: The dates of this InlineResponse20037.  # noqa: E501
        :type: InlineResponse20037Dates
        """

        self._dates = dates

    @property
    def overal_average(self):
        """Gets the overal_average of this InlineResponse20037.  # noqa: E501


        :return: The overal_average of this InlineResponse20037.  # noqa: E501
        :rtype: float
        """
        return self._overal_average

    @overal_average.setter
    def overal_average(self, overal_average):
        """Sets the overal_average of this InlineResponse20037.


        :param overal_average: The overal_average of this InlineResponse20037.  # noqa: E501
        :type: float
        """

        self._overal_average = overal_average

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20037, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20037):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
