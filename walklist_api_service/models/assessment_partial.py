# coding: utf-8

"""
    The Enrichment List

    The THS enrichment list  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contactme@markwilkins.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AssessmentPartial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'previous_status': 'str',
        'result': 'str',
        'was_due': 'datetime',
        'was_completed': 'datetime',
        'enrichment_session': 'int',
        'animal': 'int'
    }

    attribute_map = {
        'id': 'id',
        'previous_status': 'previousStatus',
        'result': 'result',
        'was_due': 'wasDue',
        'was_completed': 'wasCompleted',
        'enrichment_session': 'enrichmentSession',
        'animal': 'animal'
    }

    def __init__(self, id=None, previous_status=None, result=None, was_due=None, was_completed=None, enrichment_session=None, animal=None):  # noqa: E501
        """AssessmentPartial - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._previous_status = None
        self._result = None
        self._was_due = None
        self._was_completed = None
        self._enrichment_session = None
        self._animal = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if previous_status is not None:
            self.previous_status = previous_status
        if result is not None:
            self.result = result
        if was_due is not None:
            self.was_due = was_due
        if was_completed is not None:
            self.was_completed = was_completed
        if enrichment_session is not None:
            self.enrichment_session = enrichment_session
        if animal is not None:
            self.animal = animal

    @property
    def id(self):
        """Gets the id of this AssessmentPartial.  # noqa: E501


        :return: The id of this AssessmentPartial.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentPartial.


        :param id: The id of this AssessmentPartial.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def previous_status(self):
        """Gets the previous_status of this AssessmentPartial.  # noqa: E501


        :return: The previous_status of this AssessmentPartial.  # noqa: E501
        :rtype: str
        """
        return self._previous_status

    @previous_status.setter
    def previous_status(self, previous_status):
        """Sets the previous_status of this AssessmentPartial.


        :param previous_status: The previous_status of this AssessmentPartial.  # noqa: E501
        :type: str
        """

        self._previous_status = previous_status

    @property
    def result(self):
        """Gets the result of this AssessmentPartial.  # noqa: E501


        :return: The result of this AssessmentPartial.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AssessmentPartial.


        :param result: The result of this AssessmentPartial.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def was_due(self):
        """Gets the was_due of this AssessmentPartial.  # noqa: E501


        :return: The was_due of this AssessmentPartial.  # noqa: E501
        :rtype: datetime
        """
        return self._was_due

    @was_due.setter
    def was_due(self, was_due):
        """Sets the was_due of this AssessmentPartial.


        :param was_due: The was_due of this AssessmentPartial.  # noqa: E501
        :type: datetime
        """

        self._was_due = was_due

    @property
    def was_completed(self):
        """Gets the was_completed of this AssessmentPartial.  # noqa: E501


        :return: The was_completed of this AssessmentPartial.  # noqa: E501
        :rtype: datetime
        """
        return self._was_completed

    @was_completed.setter
    def was_completed(self, was_completed):
        """Sets the was_completed of this AssessmentPartial.


        :param was_completed: The was_completed of this AssessmentPartial.  # noqa: E501
        :type: datetime
        """

        self._was_completed = was_completed

    @property
    def enrichment_session(self):
        """Gets the enrichment_session of this AssessmentPartial.  # noqa: E501


        :return: The enrichment_session of this AssessmentPartial.  # noqa: E501
        :rtype: int
        """
        return self._enrichment_session

    @enrichment_session.setter
    def enrichment_session(self, enrichment_session):
        """Sets the enrichment_session of this AssessmentPartial.


        :param enrichment_session: The enrichment_session of this AssessmentPartial.  # noqa: E501
        :type: int
        """

        self._enrichment_session = enrichment_session

    @property
    def animal(self):
        """Gets the animal of this AssessmentPartial.  # noqa: E501


        :return: The animal of this AssessmentPartial.  # noqa: E501
        :rtype: int
        """
        return self._animal

    @animal.setter
    def animal(self, animal):
        """Sets the animal of this AssessmentPartial.


        :param animal: The animal of this AssessmentPartial.  # noqa: E501
        :type: int
        """

        self._animal = animal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssessmentPartial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssessmentPartial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
